set clipboard+=unnamedplus
set hlsearch
set incsearch
set ignorecase
set smartcase
set showcmd
set relativenumber

" Highlight yanked text
Plugin 'machakann/vim-highlightedyank'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'vim-highlightedyank'
set highlightedyank

" leader key
let mapleader = ' '

" redo
noremap U <C-r>

noremap \ "_

" paste over without overwriting default register
xnoremap p P

" jump between angle brackets
set matchpairs+=<:>

" smart line joining
set ideajoin

" open config
noremap <leader>cc :edit ~/.ideavimrc<cr>

" source config
noremap <leader>cs :source ~/.ideavimrc<cr>:nohlsearch<cr>

" highlight search results
set hlsearch

" remove search highlights
nnoremap <Esc> :nohlsearch<cr>

" case-insensitive search
set ignorecase

" enable case-sensitive search when uppercased letter is present
set smartcase

" search while typing
set incsearch

" consider camelCase and snake_case words when jumping between words

" move to the beginning of the next word
map w [w

" move to the end of the next word
map e ]w

" move to the beginning of the previous word
map b [b

" move to the end of the previous word
map ge ]b

" go to the left split
map <A-j> <C-w>h

" go to the bottom split
map <A-k> <C-w>j

" go to the top split
map <A-l> <C-w>k

" go to the right split
map <A-;> <C-w>l

map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>ww <Action>(Unsplit)
map <leader>wa <Action>(UnsplitAll)

map <leader>ge <Action>(SearchEverywhere)
map <leader>gc <Action>(GotoClass)
map <leader>gf <Action>(GotoFile)
map <leader>gs <Action>(GotoSymbol)
map <leader>ga <Action>(GotoAction)
map <leader>gd <Action>(GotoDeclaration)
map <leader>gy <Action>(GotoTypeDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gt <Action>(GotoTest)
map <leader>gm <Action>(GotoSuperMethod)
map <leader>gl <Action>(GotoLine)
map <leader>gt <Action>(ActivateTerminalToolWindow)

map <leader>ug <Action>(FindUsages)
map <leader>uu <Action>(ShowUsages)
map <leader>vs <Action>(ViewSource)
map <leader>im <Action>(QuickImplementations)
map <leader>td <Action>(QuickTypeDefinition)
map <leader>ti <Action>(ExpressionTypeInfo)
map <leader>sh <Action>(ShowHoverInfo)
map <leader>oo <Action>(FileStructurePopup)

map <leader>f <Action>(Find)
map <leader>rf <Action>(Replace)
map <leader>ff <Action>(FindInPath)
map <leader>fr <Action>(ReplaceInPath)

map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

map <leader>aa <Action>(ShowIntentionActions)
map <leader>sw <Action>(SurroundWith)
map <S-space> <Action>(Generate)
map <S-k> <Action>(EditorDuplicateLines)
map <C-[> <Action>(EditorCompleteStatement)

map <leader>en <Action>(GotoNextError)
map <leader>ep <Action>(GotoPreviousError)
map <leader>lc <Action>(JumpToLastChange)
map <leader>ll <Action>(RecentLocations)
map <C-i> <Action>(Forward)
map <C-o> <Action>(Back)
map <A-[> <Action>(MethodUp)
map <A-]> <Action>(MethodDown)

map <leader><leader> <Action>(ReformatCode)
map <leader>oi <Action>(OptimizeImports)
map <leader>ra <Action>(RearrangeCode)

map <C-k> <Action>(MoveLineDown)
map <C-l> <Action>(MoveLineUp)
map <leader>ca <Action>(CopyAbsolutePath)
map <leader>cn <Action>(CopyFileName)
map <leader>cp <Action>(CopyContentRootPath)

map <leader>fs <Action>(NewScratchFile)
map <leader>qq <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditors)
map <leader>nf <Action>(NewFile)
map <leader>nd <Action>(NewDir)
map <leader>re <Action>(RenameFile)
map <leader>of <Action>(OpenFile)
map <leader>or <Action>(RecentFiles)
map <leader>ri <Action>(RestartIde)
